// Code generated by glow (https://github.com/go-gl/glow). DO NOT EDIT.

// This file implements GlowGetProcAddress for every supported platform. The
// correct version is chosen automatically based on build tags:
//
// windows: WGL
// darwin: CGL
// linux freebsd netbsd openbsd: GLX
//
// Use of EGL instead of the platform's default (listed above) is made possible
// via the "egl" build tag.
//
// It is also possible to install your own function outside this package for
// retrieving OpenGL function pointers, to do this see InitWithProcAddrFunc.

package gles2

/*
#cgo gles2 LDFLAGS: -lGLESv2 -ldl
#include <dlfcn.h>
#include <stdlib.h>
static void* libHandle = NULL;
void* GlowGetProcAddress_gles231(const char* name) {
	if (libHandle == NULL)
		libHandle = dlopen("/usr/lib/libGLESv2.so", RTLD_LAZY);
 	if (libHandle)
		return dlsym(libHandle, name);
}
*/
import "C"
import "unsafe"

func getProcAddress(namea string) unsafe.Pointer {
	cname := C.CString(namea)
	defer C.free(unsafe.Pointer(cname))
	return C.GlowGetProcAddress_gles231(cname)
}
